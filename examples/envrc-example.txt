use nix
watch_file nix/pkgs/ami-sync/ami-sync.cr

function uuid-gen {
  if [ -f "perf-uuid.txt" ]; then
    cat "perf-uuid.txt"
  else
    head /dev/urandom | tr -dc A-Za-z0-9 | head -c 10 | tee "perf-uuid.txt"
  fi
}

export AWS_ACCESS_KEY_ID="$SECRET"
export AWS_SECRET_ACCESS_KEY="$SECRET"

# A unique perf-ops deployment identifier is required so security groups
# are not collisional between deployments.  It also makes tracking down
# resources easier.
export PERF_UUID="$(uuid-gen)"

# The AMI_FILTER env variable provides a method to filter which AMI
# images are built and syncronized by nix-build and ami-sync.  Modes of
# behavior are:
# 1) "default" which specifies what is declared in deploy-config.nix
# 2) "all" which specifies all images that exist in default.nix
# 3) "<image1> <image2> <...>" a space separated explicit AMI image list
export AMI_FILTER="default"

# Set the NIX_PATH
export NIX_PATH="nixpkgs=$(nix eval '(import ./nix {}).path')"
